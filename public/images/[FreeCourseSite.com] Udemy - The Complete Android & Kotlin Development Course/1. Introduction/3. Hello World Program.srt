1
00:00:00,270 --> 00:00:01,980
No Nelson to create our first project.

2
00:00:01,980 --> 00:00:05,460
And there is that tradition, additional programming that our first program should be to output the

3
00:00:05,460 --> 00:00:08,670
text, tell over to the console, and this is what we're going to do in this video.

4
00:00:09,360 --> 00:00:11,130
Therefore, I'm going to open intelligent.

5
00:00:11,460 --> 00:00:12,990
You should open until a JDAM.

6
00:00:21,260 --> 00:00:21,920
On the latest.

7
00:00:21,920 --> 00:00:26,360
I make sure we have projects selected and click on this plus button to create a new project.

8
00:00:29,900 --> 00:00:32,030
And here we have a few options.

9
00:00:32,060 --> 00:00:35,570
The first is the name and he'll need to name our project.

10
00:00:35,570 --> 00:00:38,560
We need to give a name to our project and the name of the project.

11
00:00:38,570 --> 00:00:43,280
We started a capital letter and if it has multiple words, every word for starts with a capital letter.

12
00:00:44,060 --> 00:00:49,340
So I'm going to call this on on this new way of naming is called the Pascal case.

13
00:00:49,340 --> 00:00:57,650
So I'm going to call this this project Hello world and also if should not have white spaces in your

14
00:00:57,650 --> 00:00:57,890
name.

15
00:00:59,510 --> 00:01:03,260
Next we have the location and this is where the project is going to be created.

16
00:01:03,260 --> 00:01:06,380
You can change this location if you want, but I'm going to keep the default location.

17
00:01:07,220 --> 00:01:12,290
Next, we have language and here you here do need to select the language on which this project is going

18
00:01:12,290 --> 00:01:13,370
to be created.

19
00:01:13,370 --> 00:01:15,830
So we select Kotlin.

20
00:01:16,400 --> 00:01:23,060
If you're Java selected your selection for the B system, we select intelligent and next we have the

21
00:01:23,060 --> 00:01:24,860
JDK, the Java development kit.

22
00:01:25,430 --> 00:01:30,830
And if for whatever reason it says here in angled brackets and the decay, just click on that and go

23
00:01:30,830 --> 00:01:39,090
down here or down off to often it will say detect the G case and you will see the JDK down there.

24
00:01:39,110 --> 00:01:41,600
You're going to see Amazon quoted over version 17.

25
00:01:42,200 --> 00:01:43,040
Just click on that.

26
00:01:43,040 --> 00:01:44,000
It's going to be added here.

27
00:01:45,650 --> 00:01:50,120
Next, we have this odd the sample code and what this is going to do, as the name implies, is going

28
00:01:50,120 --> 00:01:52,640
to generate some code for us.

29
00:01:52,640 --> 00:02:00,050
But I don't want it to have that code generated now because I want to type that code myself and I want

30
00:02:00,050 --> 00:02:00,890
to explain that code.

31
00:02:00,890 --> 00:02:03,980
And in the next video, we're going to check that to generate the code for us.

32
00:02:04,370 --> 00:02:06,920
So I'm going to click on Create the Now to create the project.

33
00:02:20,370 --> 00:02:26,970
And here you have the teams who can keep that you activated because it's a useful information.

34
00:02:27,120 --> 00:02:28,660
But I'm going to check this.

35
00:02:28,680 --> 00:02:30,330
Actually, I'm going to just close it.

36
00:02:34,190 --> 00:02:39,230
You have those windows which is that is that is a plug in update installed.

37
00:02:40,130 --> 00:02:41,150
I'm going to close this.

38
00:02:44,210 --> 00:02:49,250
So what we have now on the left hand side is called the Project Pane, and here we have song folders

39
00:02:49,250 --> 00:02:52,130
which intelligent idea generated for us.

40
00:02:52,760 --> 00:02:58,820
But now I want to I want to show you how to check for intelligent updates, because in this way, we'll

41
00:02:58,820 --> 00:03:00,620
have the latest features throughout this course.

42
00:03:00,620 --> 00:03:05,870
And to check for intelligent data, go to help and to go down here to research, check for updates.

43
00:03:05,870 --> 00:03:09,410
And here you can check for intelligent dates and you will see a window down here.

44
00:03:09,410 --> 00:03:14,810
And if there is an update, is going to say that there is an update and can install that update.

45
00:03:15,560 --> 00:03:20,960
But now we're saying that that you already have the latest version of intelligent plugins installed

46
00:03:20,960 --> 00:03:26,450
because we have the latest updates, but is good to check for this because in this way we'll have the

47
00:03:26,450 --> 00:03:27,980
latest updates throughout this course.

48
00:03:28,850 --> 00:03:34,250
Next check if you want to check for Kotlin updates or for the programming language you Kotlin, you

49
00:03:34,250 --> 00:03:37,340
go to tools Kotlin and go here it is.

50
00:03:37,340 --> 00:03:43,610
Configure Kotlin plugin updates and if there is a new update, you will see it here and click on installing.

51
00:03:43,610 --> 00:03:47,730
That update is going to be installed on Intel.

52
00:03:47,750 --> 00:03:51,860
Jerry So there is no update because we have the latest update I'm going to click on.

53
00:03:51,860 --> 00:03:52,250
Okay.

54
00:03:53,120 --> 00:03:57,320
Now let's focus on the left hand side and if you don't see it, if you see something like this and you

55
00:03:57,320 --> 00:04:04,220
don't see this in this expanded font, just click on this greater sign sign in front of Sara Caesar

56
00:04:04,220 --> 00:04:05,480
assistance for source.

57
00:04:05,480 --> 00:04:07,700
This is what our source code is going to go.

58
00:04:08,630 --> 00:04:15,440
Then click on this greater sign in front of Man and make sure to have the folder Kotlin selected on

59
00:04:15,440 --> 00:04:16,160
this folder.

60
00:04:16,160 --> 00:04:18,500
Kotlin This is what's going to hold our code.

61
00:04:18,500 --> 00:04:22,190
But first we need to create the file, and the file is the theme.

62
00:04:22,210 --> 00:04:29,240
We're going to put our code so we right click on this, go to your and here we select on the right hand

63
00:04:29,240 --> 00:04:31,100
side to select coddling class file.

64
00:04:31,940 --> 00:04:36,020
Now we need to give an entire file and I'm going to call this file main.

65
00:04:36,020 --> 00:04:38,330
You will see the reason for this later.

66
00:04:38,870 --> 00:04:40,750
So I'm going to call this for File Main.

67
00:04:40,760 --> 00:04:42,410
The name also should be in Pascal.

68
00:04:42,410 --> 00:04:44,180
Okay, so we should start with the capital letter.

69
00:04:44,180 --> 00:04:49,820
Even if it has multiple arrows, every word is for subs, the capital capitalism and for the from this

70
00:04:49,820 --> 00:04:54,350
options that we have here, we select file because we're going to create others in the file now press

71
00:04:54,350 --> 00:04:54,770
enter.

72
00:04:57,030 --> 00:05:00,360
Now, the file was created for us as it goes in the folder.

73
00:05:01,140 --> 00:05:05,230
CAITLYN No, we have meant that you have the file, and also it opened the file for us.

74
00:05:05,230 --> 00:05:05,610
So let's.

75
00:05:07,820 --> 00:05:08,330
Click there.

76
00:05:08,810 --> 00:05:13,370
Now, if you don't have the file open and if you only have something like this, just double click on

77
00:05:13,370 --> 00:05:17,890
the file in the file is going to be open for, you know, hit it.

78
00:05:17,900 --> 00:05:22,970
Now we're going to type song called now you need to type exactly what I type so type fun.

79
00:05:24,330 --> 00:05:30,390
So while I am typing, as you can see, A.J. is trying to help us and is given us some suggestions.

80
00:05:30,840 --> 00:05:32,370
So you're saying do mean fun?

81
00:05:32,580 --> 00:05:39,840
That and if you want to fill in that what we just prÃ©senter because I want you to type that fun keyword

82
00:05:40,140 --> 00:05:40,530
fun.

83
00:05:40,530 --> 00:05:42,070
And we also added the space.

84
00:05:42,090 --> 00:05:44,540
So fun space then what?

85
00:05:44,550 --> 00:05:45,230
I mean.

86
00:05:45,900 --> 00:05:47,890
And next we need to put parenthesis.

87
00:05:48,030 --> 00:05:50,640
And as you can see, this play button now appeared.

88
00:05:50,670 --> 00:05:52,080
I'm going to explain immediately why.

89
00:05:52,860 --> 00:05:54,720
And we put the left parameters.

90
00:05:54,720 --> 00:05:58,320
And when we put the left is the right parent is going to be added automatically.

91
00:05:59,100 --> 00:06:02,430
So we pause to let parents and the right parents without the automatically.

92
00:06:02,610 --> 00:06:06,240
Then we get outside of the parenthesis, we put a space.

93
00:06:06,690 --> 00:06:08,940
Now we're going to add curly braces.

94
00:06:08,940 --> 00:06:13,320
And again, who put the left calibration that I calibrate is going to be added automatically, because

95
00:06:13,320 --> 00:06:24,330
A.J. is helping us know we would inside the calibrations and now we press enter and it added the curly

96
00:06:24,330 --> 00:06:27,720
brace on the third line and also indented this line for us.

97
00:06:28,980 --> 00:06:31,830
Now, let's talk about what we have here.

98
00:06:32,280 --> 00:06:36,120
Now, what we have here is we what we use what is called the main function.

99
00:06:36,240 --> 00:06:39,570
And the main function is the entry point of our program.

100
00:06:39,580 --> 00:06:46,530
So every program that you create it, if it first needs this entry point in order to be able to compile

101
00:06:46,530 --> 00:06:47,040
your code.

102
00:06:48,090 --> 00:06:52,350
But let's take each part of this main function individually to talk about.

103
00:06:52,980 --> 00:06:58,790
So first we have this fun, and fun is the keyword for creating a function.

104
00:06:59,250 --> 00:07:05,460
And you can use this function to create your own functions, but you're going to see that in and future

105
00:07:05,460 --> 00:07:05,880
videos.

106
00:07:06,660 --> 00:07:09,900
Next to have main a main is the name of this function.

107
00:07:10,170 --> 00:07:16,350
Functions can have different names, but Main is a special one, as I said, because Main is the entry

108
00:07:16,350 --> 00:07:17,420
point of our program.

109
00:07:17,420 --> 00:07:22,590
Maybe every program that you create needs and it needs a main function in order to be able to run your

110
00:07:22,590 --> 00:07:22,890
code.

111
00:07:23,370 --> 00:07:30,210
And in fact, if I change the name of this function to Fun Main, let's say A the playback button immediately

112
00:07:30,210 --> 00:07:35,010
disappeared because now we don't have an entry point and our programming cannot run.

113
00:07:35,250 --> 00:07:41,040
So this special function and functions can have different rating names, as I said, and as you will

114
00:07:41,040 --> 00:07:46,590
see when you're going to create your own function that you can create, you can give the different names

115
00:07:46,590 --> 00:07:47,260
to other functions.

116
00:07:47,280 --> 00:07:55,410
Now, next, we have parentheses and we have parentheses because functions can take parameters and can

117
00:07:55,410 --> 00:07:57,600
do some work without those parameters.

118
00:07:57,600 --> 00:08:03,510
But our function does not take any parameter, but we still need to provide the parentheses because

119
00:08:03,510 --> 00:08:10,840
they are part of the syntax and we can think of the syntax like the grammar rules that we need to do

120
00:08:11,140 --> 00:08:17,670
to respect in a specific language in order to be to be a order to be understood.

121
00:08:17,940 --> 00:08:18,720
To be understood.

122
00:08:19,170 --> 00:08:22,550
And in the same way, this is the syntax in the programming set.

123
00:08:22,620 --> 00:08:30,030
It's like the grammar rules in which the compiler, as you will see, what is the compiler later, the

124
00:08:30,030 --> 00:08:37,980
compiler needs to enforce as you to respect those syntactical rules, which is to have parentheses for

125
00:08:37,980 --> 00:08:41,160
a function in order to be able to understand your code.

126
00:08:41,160 --> 00:08:49,630
Because if I delete the parentheses here, now have an underline which says expecting parentheses.

127
00:08:49,650 --> 00:08:58,730
So it's it it you need to respect the syntactical rules in order for your code to be to be understood

128
00:08:59,040 --> 00:09:00,660
next to have curly braces.

129
00:09:00,660 --> 00:09:07,160
And we have left curly brace and dry turtle base and this is called the body of the function.

130
00:09:07,170 --> 00:09:09,190
So this is what our code goes.

131
00:09:09,210 --> 00:09:14,610
So this is also called the code block because it's the block of code.

132
00:09:15,360 --> 00:09:22,670
This is what our logic, our our this what our logical lines of code go down.

133
00:09:23,070 --> 00:09:26,310
We define them inside the and the the curly braces.

134
00:09:26,310 --> 00:09:32,460
So this represents the body of the function and let's out some code and I'm going to type it into line

135
00:09:32,460 --> 00:09:32,750
here.

136
00:09:32,760 --> 00:09:39,390
So because we need to output something in the console so we type here the print line, so we type print

137
00:09:39,630 --> 00:09:42,800
and well and dumping you.

138
00:09:42,870 --> 00:09:48,210
So she has suggested and we have the suggestion print line and we select the first one to fill in for

139
00:09:48,210 --> 00:09:48,450
us.

140
00:09:48,960 --> 00:09:56,130
And now we go inside the parenthesis of the print line and we put double quotation marks and inside

141
00:09:56,130 --> 00:09:58,500
the double quotation marks we type Hello.

142
00:10:01,160 --> 00:10:01,670
World.

143
00:10:02,930 --> 00:10:04,520
Now we need to.

144
00:10:05,180 --> 00:10:06,460
We need to run this code.

145
00:10:06,470 --> 00:10:11,420
And in order to run this code to compile the squad, we can do it in two ways.

146
00:10:11,420 --> 00:10:14,510
First, you can click on this play button that we have here.

147
00:10:16,050 --> 00:10:21,390
Or you can right click and you can go here where it says Run, meaning that getting the quote is going

148
00:10:21,390 --> 00:10:22,560
to be compiled.

149
00:10:23,190 --> 00:10:24,630
And let's do it from here.

150
00:10:24,630 --> 00:10:29,130
First, I'm going to click on this play button to run our code, and I'm going to see the console opening

151
00:10:29,130 --> 00:10:30,630
down and you're going to see the text.

152
00:10:30,630 --> 00:10:33,270
Hello world had a word, output it.

153
00:10:35,000 --> 00:10:37,760
So the console opened and we have hello world.

154
00:10:37,760 --> 00:10:41,710
We have the text that we type inside this thing that we have here.

155
00:10:41,720 --> 00:10:46,550
This is also a function and to have this code outputs it and now in the console the console opened.

156
00:10:47,120 --> 00:10:51,740
Now I'm going to I'm going to close the console to explain what this print line is.

157
00:10:52,010 --> 00:10:54,680
This print line that we have here is a function also.

158
00:10:55,130 --> 00:11:01,730
But is that the function which takes some it which takes input and the input is this sticks and this

159
00:11:01,730 --> 00:11:09,770
function, the its job is to take whatever you pass as the input and to output that in the console.

160
00:11:09,770 --> 00:11:15,920
So this is what this print line is doing and this is a function that we didn't create, we didn't type

161
00:11:15,920 --> 00:11:23,660
free were fun print line and then we call it this function which is built into quantity.

162
00:11:23,750 --> 00:11:27,830
And this is a fact which is already built by the Kotlin programmers.

163
00:11:27,830 --> 00:11:31,330
So we just call that function inside our code.

164
00:11:31,340 --> 00:11:33,650
And can you as you don't need to create this function.

165
00:11:33,650 --> 00:11:36,740
So this is the this is what this print line is doing.

166
00:11:36,740 --> 00:11:41,840
So it's taken whatever you pass inside the parentheses and it's outputting that in the console.

167
00:11:42,650 --> 00:11:50,990
So this is our discussion about the first program, which is to output some takes and the console helloworld.

168
00:11:51,650 --> 00:11:58,040
And now I'm going to show you that I now I'm going to show you an illustration to understand what is

169
00:11:59,480 --> 00:12:09,080
what is the JDK, the JVM and how Kotlin and Java achieves this interoperability because Kotlin and

170
00:12:09,080 --> 00:12:10,520
Java are fully interoperable.

171
00:12:10,520 --> 00:12:16,070
And that means that you can you can have a Java project to which you can add quoted in code and you

172
00:12:16,070 --> 00:12:18,320
can compile that code and everything will work fine.

173
00:12:18,560 --> 00:12:22,190
And also, I'm going to play in order what the word compiler means.

174
00:12:23,240 --> 00:12:25,490
And for that I'm going to bring early in and here.

175
00:12:27,500 --> 00:12:28,910
So this is the illustration.

176
00:12:29,240 --> 00:12:32,900
And let's talk about what we have here.

177
00:12:33,470 --> 00:12:39,920
First, we have Kotlin source code and Kotlin source code is the code that we wrote is this code that

178
00:12:39,920 --> 00:12:42,830
is meant to be human readable.

179
00:12:42,830 --> 00:12:47,330
So this code is the code that we as humans can understand.

180
00:12:47,690 --> 00:12:50,660
We can write this code, we can read this God.

181
00:12:51,050 --> 00:12:56,150
But the computer does understand this high level, high level code that we wrote.

182
00:12:56,150 --> 00:12:57,200
It needs something.

183
00:12:57,200 --> 00:13:01,520
It's need it needs machine quote, it needs binary code in order to be able to understand.

184
00:13:02,180 --> 00:13:05,240
And this is where the JDK comes into action.

185
00:13:05,240 --> 00:13:14,690
So our Kotlin source code, again, this quad, which is meant to be human readable, then it when when

186
00:13:14,690 --> 00:13:21,650
we press on that below play button one and when you press on that play button on this button and the

187
00:13:21,650 --> 00:13:30,770
code is compiled, what happens under the hood is that that Kotlin source code is, is taken by the

188
00:13:30,770 --> 00:13:35,750
Java development kit, the JDK and through the Kotlin compiler.

189
00:13:35,750 --> 00:13:38,990
So the controlling compiler acts like a translator.

190
00:13:38,990 --> 00:13:43,370
It takes that high level human readable and writable code.

191
00:13:44,180 --> 00:13:48,770
It converts that code then into what is called Java bytecode.

192
00:13:48,920 --> 00:13:54,410
And this is not the final step, as you can see in this illustration, just this is just the intermediary

193
00:13:54,410 --> 00:13:54,650
step.

194
00:13:54,650 --> 00:13:59,360
This is not converted into a machine code.

195
00:14:00,050 --> 00:14:05,690
Then this Java byte code, it's taken by the Java.

196
00:14:05,690 --> 00:14:14,150
And so it's send to the JVM and the JVM then takes that Java bytecode and convert the general Java bytecode

197
00:14:14,500 --> 00:14:19,220
into something which a machine, which our specific machine can understand.

198
00:14:19,850 --> 00:14:23,960
But let's, let's first explain why, why.

199
00:14:24,230 --> 00:14:30,830
Kotlin Wired The JDK text is quoted in source code, and then it converted its Scotland source code

200
00:14:30,830 --> 00:14:32,000
into the Java bytecode.

201
00:14:32,750 --> 00:14:42,080
And this is doing this because different processors and different operating systems need different instructions

202
00:14:42,080 --> 00:14:43,670
in order to understand our code.

203
00:14:44,060 --> 00:14:49,210
So if we are not, will not to have this Java bytecode.

204
00:14:49,220 --> 00:14:55,490
So if we had, we will compile our code on a specific platform.

205
00:14:55,820 --> 00:15:02,930
That code can run only on that specific platform, but because our source code is taken by the JDK and

206
00:15:02,930 --> 00:15:12,410
through the computer and is converted into Java bytecode and the Java Byte code, then it's, it's it,

207
00:15:12,420 --> 00:15:19,190
send it to the JVM and JVM stands for Java Virtual Machine and the JVM then because different platforms

208
00:15:19,190 --> 00:15:26,060
and different operating a different browser and different processor needs the different instructions.

209
00:15:26,870 --> 00:15:33,920
The JVM is the one which is doing the hard work with all figured out, figuring out what kind of instruction

210
00:15:34,070 --> 00:15:36,440
that specific platform needs.

211
00:15:36,440 --> 00:15:42,530
So it converts the Java bytecode into machine code, let's say, which is a Windows platform can understand.

212
00:15:42,980 --> 00:15:51,530
Then the same thing happens to Linux that the JVM received the same Java byte code and then it converts

213
00:15:51,530 --> 00:15:57,200
that Java by according to machine code, which a Linux platform can understand and then is doing the

214
00:15:57,200 --> 00:15:57,800
same thing.

215
00:15:59,410 --> 00:16:00,610
To a mac OS.

216
00:16:00,620 --> 00:16:08,830
So the MC waves, the JVM is going to is going to receive the same Java bytecode and is going to convert

217
00:16:08,830 --> 00:16:12,580
that Java bytecode into machine code which market makers can understand.

218
00:16:12,910 --> 00:16:20,500
So this is how a quarter in Java can achieve this goal, this thing called write once and run everywhere.

219
00:16:20,530 --> 00:16:30,910
This is because the the work of converting that machine code, which, which is a specific platform

220
00:16:30,910 --> 00:16:38,370
I can understand, has shifted from the programmer to the platform which has the which implements that

221
00:16:38,380 --> 00:16:38,950
JVM.

222
00:16:38,980 --> 00:16:47,170
So we just wrote our code, we run our code to the JDK, the JDK converted that code in Java bytecode,

223
00:16:47,170 --> 00:16:56,440
and then the platform which has the JVM installed is doing the work of converting that Java bytecode

224
00:16:56,440 --> 00:17:00,850
that we wrote into something which that platform, that specific platform can understand.

225
00:17:01,270 --> 00:17:06,880
So and this is why Java and Kotlin are fully interoperable.

226
00:17:06,880 --> 00:17:14,350
So you can add the core, you cannot Java code to an existing Kotlin program and vice versa.

227
00:17:14,350 --> 00:17:17,590
You cannot the you cannot the Java.

228
00:17:17,590 --> 00:17:21,400
You cannot do quarterly in code to an existing Java program.

229
00:17:21,760 --> 00:17:31,810
And that is that is possible because the JDK is going to is going to convert to the compiler all of

230
00:17:31,810 --> 00:17:33,880
that code into the same Java bytecode.

231
00:17:33,880 --> 00:17:39,730
And then that code is going to be run on the JVM and the JVM is going to convert that into machine code

232
00:17:39,730 --> 00:17:42,370
and that code is going to run it on a specific platform.

233
00:17:42,940 --> 00:17:49,840
So this is how Java and Kotlin and this is why Java and Quotidien online are fully interoperable because

234
00:17:50,470 --> 00:17:55,900
they are they are ultimately converted into the same Java bytecode.

235
00:17:55,900 --> 00:18:04,330
And you can also achieve this right once run everywhere because that code then runs on the JVM Java

236
00:18:04,330 --> 00:18:09,970
virtual machine, which is doing the hard the long record of figuring out what kind of instructions

237
00:18:10,480 --> 00:18:15,370
a specific platform needs in order to understand that code that we wrote.

238
00:18:15,730 --> 00:18:23,590
And in this way that hard working has shifted from us to the people who implement the JVM.

239
00:18:24,280 --> 00:18:28,420
So this how the JDK and the JVM also Under-the-hood.

240
00:18:29,140 --> 00:18:31,710
And if you find this confusing, don't build this.

241
00:18:31,810 --> 00:18:41,260
This is just a relaxed discussion about how the JDK, what is the JDK and what is the Kotlin compiler?

242
00:18:41,260 --> 00:18:42,430
Because we said our code.

243
00:18:43,120 --> 00:18:45,280
I said previously that our code is compiled.

244
00:18:45,700 --> 00:18:48,410
When I said that, this was actually what was happening.

245
00:18:48,430 --> 00:18:56,470
Our code was taken by the JDK and the JDK was go in Java bytecode and then it was sent to the JVM of

246
00:18:57,370 --> 00:19:03,130
which is one of my windows, and then that is converted into machine code and then we see in the output

247
00:19:03,910 --> 00:19:10,390
helloworld so this our discussion about the first program, how to get it, I had a word and this is

248
00:19:10,390 --> 00:19:17,140
the additional discussion about how the JDK, how the coding compiler and how the JVM works.

249
00:19:17,350 --> 00:19:18,610
So see in the next video.
