1
00:00:00,300 --> 00:00:05,670
So in the previous video we created our first program and even though it was a simple program, you

2
00:00:05,670 --> 00:00:08,320
should celebrate because you created your first program.

3
00:00:08,340 --> 00:00:12,810
But if you want to make a program to do something useful, you need to store data.

4
00:00:12,810 --> 00:00:15,200
And in order to store data, you need to use variables.

5
00:00:15,480 --> 00:00:17,990
And this is what we're going to talk about in this video.

6
00:00:18,000 --> 00:00:19,410
Therefore, I'm going to open intelligent.

7
00:00:26,200 --> 00:00:28,840
I'm going to create a new project, so make sure to that.

8
00:00:28,960 --> 00:00:33,250
On the left hand side, you have probably selected click on this plus button to create the new project.

9
00:00:36,100 --> 00:00:37,780
I'm going to call it variables.

10
00:00:38,350 --> 00:00:40,320
It should be in Pascal case if it has multiple.

11
00:00:40,330 --> 00:00:43,540
What is the language we have already causally selected for the belief system?

12
00:00:43,540 --> 00:00:50,170
Intelligent and also make sure to have the key selected here and now I'm going to check this out.

13
00:00:50,170 --> 00:00:55,360
Simple code because this is going to generate the code that we type previously respectively, the main

14
00:00:55,360 --> 00:01:02,310
function and the print line two and the hell our text is going to be now auto generated for us.

15
00:01:02,470 --> 00:01:03,040
Why?

16
00:01:03,490 --> 00:01:08,620
Because we check this box on simple code and it is going to add the code automatically for us.

17
00:01:08,710 --> 00:01:09,880
So I'm going to click on Create.

18
00:01:31,330 --> 00:01:35,490
Now our project is ready to go.

19
00:01:35,560 --> 00:01:41,140
And as you can see here, it generated song called for us and this is similar to what we did in the

20
00:01:41,140 --> 00:01:45,640
previous video where we created our will, create our code ourselves.

21
00:01:46,150 --> 00:01:52,110
But we have some additional code and I'm going to delete this additional code because it will make things

22
00:01:52,150 --> 00:01:52,810
confusing.

23
00:01:52,810 --> 00:01:54,040
So I'm going to delete this part.

24
00:01:55,870 --> 00:01:57,790
Sorry, I'm going to do this part.

25
00:01:59,980 --> 00:02:07,720
And also you may, may have noticed that, uh, here in, uh, inside this parenthesis now we have this

26
00:02:07,720 --> 00:02:10,060
obtuse array and a string.

27
00:02:11,050 --> 00:02:16,930
We can delete this too, because, uh, it'll, uh, making things confusing.

28
00:02:17,920 --> 00:02:23,380
And we're going to talk about, uh, what are, uh, rays and all of that in the next videos.

29
00:02:24,250 --> 00:02:25,060
Now I'm going to.

30
00:02:27,900 --> 00:02:28,310
Alright.

31
00:02:28,770 --> 00:02:29,280
Noted.

32
00:02:30,210 --> 00:02:32,640
Now let's run this code to see.

33
00:02:34,570 --> 00:02:36,820
To see what is happening is going to output.

34
00:02:36,820 --> 00:02:40,450
Uh, that takes two like, uh, it did in the previous video.

35
00:02:46,980 --> 00:02:52,560
You should open the console in a short moment and indeed it open the console and output to the text

36
00:02:52,560 --> 00:02:54,950
hello world like it did in the previous video.

37
00:02:54,960 --> 00:02:56,520
So I'm going to close the console now.

38
00:02:56,880 --> 00:03:06,460
Also, let's expand this s r c to see the file that it was created automatically for us this time and.

39
00:03:08,060 --> 00:03:16,550
Let's change this helo, what it takes to put into another place, let's say let's put into type your

40
00:03:16,550 --> 00:03:17,140
name there.

41
00:03:17,140 --> 00:03:18,350
And my case is Alex.

42
00:03:18,470 --> 00:03:23,660
So I'm going to run this squad and it will output my name in the console.

43
00:03:28,150 --> 00:03:30,870
All right, so it put it.

44
00:03:30,930 --> 00:03:31,830
Hello, Alex.

45
00:03:31,860 --> 00:03:34,170
Like we typed here.

46
00:03:35,280 --> 00:03:37,770
But, um, it's, uh.

47
00:03:37,830 --> 00:03:39,240
What we have here is pretty.

48
00:03:39,240 --> 00:03:40,200
Pretty flexible.

49
00:03:40,200 --> 00:03:42,700
It's a better way to, to to do that.

50
00:03:42,840 --> 00:03:43,890
You to be.

51
00:03:43,890 --> 00:03:47,280
To have something to store this name.

52
00:03:47,550 --> 00:03:54,860
And then it is fair that that thing here to call that thing here in this world to be a bit more, um,

53
00:03:54,900 --> 00:03:56,190
what do they know dynamic.

54
00:03:57,210 --> 00:04:00,240
And to do that we need to use variables.

55
00:04:00,240 --> 00:04:08,880
And variables are, um, unlike some containers which can hold data values and um.

56
00:04:10,480 --> 00:04:12,070
Let's see how to create the variable.

57
00:04:12,100 --> 00:04:12,460
Okay.

58
00:04:13,450 --> 00:04:20,620
Let's, uh, put to the, uh, the code below the above our print, uh, allowance statement.

59
00:04:21,640 --> 00:04:28,390
And um, if you don't know what a statement is, a statement is of complete, uh, instruction of execution.

60
00:04:29,200 --> 00:04:35,320
Now, to create a variable, we just type the keyword var.

61
00:04:36,340 --> 00:04:37,840
Which stands for variable.

62
00:04:39,280 --> 00:04:39,730
All right.

63
00:04:40,900 --> 00:04:46,360
Next, we need to give a name to our very own variable to be able to refer it later, to call it later.

64
00:04:46,370 --> 00:04:49,630
And I'm going to earn the naming convention around naming.

65
00:04:49,630 --> 00:04:52,120
The variable is column is called camel case.

66
00:04:52,840 --> 00:04:55,120
And that means that the first the.

67
00:04:56,780 --> 00:05:00,390
Letter in the name if it has multiple words.

68
00:05:00,410 --> 00:05:02,780
So start with the lowercase letter.

69
00:05:02,780 --> 00:05:08,240
So I'm going to type user and the next word name with the capital letter.

70
00:05:09,200 --> 00:05:09,470
Alright.

71
00:05:09,560 --> 00:05:15,320
The next I need to provide the type, type of the variable and that means what kind of data this variable

72
00:05:15,320 --> 00:05:16,640
is going to hold is going to store.

73
00:05:17,210 --> 00:05:23,390
To do that we need to put column in next we need to say what type of data is going to stored what?

74
00:05:24,340 --> 00:05:25,710
What that does going to store.

75
00:05:25,720 --> 00:05:29,860
And we want to store text and to store text.

76
00:05:29,860 --> 00:05:30,870
We need to type here.

77
00:05:30,890 --> 00:05:37,210
String and string means that this variable is going to store a a sequence of characters or text.

78
00:05:38,050 --> 00:05:44,890
Now we need to assign a value to this variable and to do that to put we put here equals.

79
00:05:46,680 --> 00:05:47,180
Space.

80
00:05:48,600 --> 00:05:56,300
And because we explicitly said here that we weren't going to put these text or string, we put a double

81
00:05:56,310 --> 00:05:59,280
pair of quotation marks and when we type.

82
00:05:59,760 --> 00:06:03,840
Alex Alright, so now we create our variable.

83
00:06:04,080 --> 00:06:11,790
We give it a name, a type, and we also assign a value is a variable.

84
00:06:12,210 --> 00:06:19,410
Next we need to refer this variable down here and to, to, to refer to that variable.

85
00:06:19,980 --> 00:06:24,480
I'm going to delete this text first and to refer the variable we put dollar sign.

86
00:06:26,170 --> 00:06:31,210
And after the dollar sign, we start typing the name of the the variable user.

87
00:06:31,690 --> 00:06:35,890
And as I'm typing, the intelligence is given us some suggestions.

88
00:06:35,890 --> 00:06:39,550
And he said, do you mean this username variable?

89
00:06:39,550 --> 00:06:42,850
And it also has this V here for a variable.

90
00:06:42,860 --> 00:06:45,160
So I'm going to press enter to fill in that for me.

91
00:06:46,240 --> 00:06:46,960
And if I.

92
00:06:49,600 --> 00:06:50,380
Run the squad.

93
00:06:51,910 --> 00:06:53,110
You'll see the exact.

94
00:06:55,770 --> 00:06:57,910
Things are happening here.

95
00:06:57,940 --> 00:07:04,550
It outputted the text to panelists, but this time we didn't type the text directly here.

96
00:07:04,560 --> 00:07:10,710
We we we stored the text in a variable and we call that variable in, in our println.

97
00:07:10,710 --> 00:07:14,430
I'm going to add a space here to make things more clear.

98
00:07:15,120 --> 00:07:19,470
Now, what we can do is to change the value of this variable by.

99
00:07:21,040 --> 00:07:21,580
Um.

100
00:07:21,700 --> 00:07:24,400
Adding uh below for our variable.

101
00:07:24,610 --> 00:07:29,560
Typing the name of the variable again user name equals.

102
00:07:29,590 --> 00:07:32,320
And now we can assign a new value to this variable.

103
00:07:32,320 --> 00:07:33,670
And let's put.

104
00:07:35,820 --> 00:07:37,080
Let's put John here.

105
00:07:37,960 --> 00:07:38,340
Right.

106
00:07:38,460 --> 00:07:40,680
Let's run this code to see what happens now.

107
00:07:41,250 --> 00:07:43,440
Now, this time, when this, uh.

108
00:07:44,070 --> 00:07:45,690
This instruction is going to be called.

109
00:07:45,690 --> 00:07:50,430
Is going to print, then the new value of the variable, which is John.

110
00:07:51,630 --> 00:07:55,080
So as you can see down here, it outputs the text.

111
00:07:55,080 --> 00:07:55,700
Hello, John.

112
00:07:55,710 --> 00:08:00,510
So we can change the value of the variable after we assign a value to it.

113
00:08:01,080 --> 00:08:15,840
But what you can't do is to is to type here username equals five and if you hover over here it says

114
00:08:15,840 --> 00:08:22,410
integer literal does not conform to this painting type string and in other words is saying that we said

115
00:08:22,410 --> 00:08:29,880
explicitly, explicitly up here that is going to store only text and down here we try to put a whole

116
00:08:29,880 --> 00:08:38,100
number, an integer and that is not going to water because Kotlin is a length language which is which

117
00:08:38,100 --> 00:08:39,840
is called statically typed.

118
00:08:40,530 --> 00:08:47,910
And that means that it will check the types of the variable at compile time, not at runtime.

119
00:08:47,910 --> 00:08:49,640
And that means it does it.

120
00:08:49,650 --> 00:08:58,530
You cannot run your code if you assign a value to to a variable which has a different type done than

121
00:08:58,530 --> 00:09:02,790
the type that you specify specified when you declare the variable.

122
00:09:03,300 --> 00:09:05,070
This is why you get this warning here.

123
00:09:05,700 --> 00:09:06,720
And if I delete this.

124
00:09:11,840 --> 00:09:12,080
Now.

125
00:09:12,080 --> 00:09:12,790
Listen to this.

126
00:09:15,020 --> 00:09:15,500
All right.

127
00:09:17,510 --> 00:09:17,910
Okay.

128
00:09:18,830 --> 00:09:25,550
The next type of variable that were also actually not ordinate then is type David over.

129
00:09:25,820 --> 00:09:30,140
The next way of declaring a variable is using the keyword file.

130
00:09:31,010 --> 00:09:38,510
So if it declared it, if it declared a variable as Val, Val means that we cannot change its value

131
00:09:38,840 --> 00:09:41,330
after we assign a value to it.

132
00:09:41,810 --> 00:09:47,330
So if you try if you try to assign a new value to our variable like we did here, up here, it will

133
00:09:47,330 --> 00:09:47,900
not work.

134
00:09:47,930 --> 00:09:51,770
So let's actually let's actually just change here.

135
00:09:52,520 --> 00:09:53,570
Let's put Val.

136
00:09:54,890 --> 00:09:55,240
Okay.

137
00:09:55,820 --> 00:10:04,070
And in after I did that, it immediately underlined in red the username and it says Val cannot be reassigned.

138
00:10:04,070 --> 00:10:11,570
And that is because if it declared it, if declared a variable as val, you cannot change its value

139
00:10:11,570 --> 00:10:17,240
later until you can put over a value to that variable only once.

140
00:10:17,600 --> 00:10:22,580
And that's what we cannot change the variable, the value of the variable later.

141
00:10:23,270 --> 00:10:29,090
So let's change back to Var to have the ability to change the value.

142
00:10:31,430 --> 00:10:34,460
Now let's look at another type of variable.

143
00:10:34,790 --> 00:10:37,790
So I'm going to type var again.

144
00:10:38,990 --> 00:10:40,430
I'm going to call it age.

145
00:10:43,640 --> 00:10:46,550
I'm going to put Colon to specify a type here.

146
00:10:46,910 --> 00:10:54,050
And now we're going to use another type, which is int and instance for integer or for whole numbers.

147
00:10:54,140 --> 00:10:55,790
Now I need to assign a value to it.

148
00:10:55,790 --> 00:11:03,230
I'm going to call I'm going to put ten or 20, 22.

149
00:11:04,850 --> 00:11:05,300
All right.

150
00:11:05,300 --> 00:11:08,000
So what to have now is a different type.

151
00:11:08,330 --> 00:11:10,190
Up here we have string.

152
00:11:10,190 --> 00:11:13,340
And that means that we're going to we're going to store a sequence of characters.

153
00:11:13,340 --> 00:11:15,770
And down here we have integers.

154
00:11:15,770 --> 00:11:21,770
And that means that we can store only only numbers, only hold numbers.

155
00:11:21,770 --> 00:11:26,030
And there are different type of numbers which are going to look in the next video.

156
00:11:26,840 --> 00:11:28,820
And if I try here to change this.

157
00:11:30,420 --> 00:11:32,640
Two changes first.

158
00:11:32,840 --> 00:11:33,890
First, let's.

159
00:11:34,050 --> 00:11:35,040
Let's actually.

160
00:11:36,150 --> 00:11:37,380
Let's actually print this.

161
00:11:37,380 --> 00:11:40,530
Uh, hello, Alex.

162
00:11:42,270 --> 00:11:52,560
Let's type your age is in here to put dollar sign in we call the name of the variable we tied the name

163
00:11:52,560 --> 00:11:59,040
of it's a variable age so you press enter to fill in that for us and if you run this squad.

164
00:12:06,210 --> 00:12:07,690
No says hello, John.

165
00:12:07,710 --> 00:12:11,730
Your age is 22, so it's No.

166
00:12:11,730 --> 00:12:18,270
Two using the value, the values of this variable in our println and we can change for the variable

167
00:12:18,270 --> 00:12:22,710
also the its value because is declared as a var not a value.

168
00:12:22,770 --> 00:12:28,290
So we can put here age equals let's say 25 and if around this code.

169
00:12:30,830 --> 00:12:34,370
The change is reflected immediately in our code.

170
00:12:34,910 --> 00:12:35,990
So now you see.

171
00:12:35,990 --> 00:12:36,590
Hello, John.

172
00:12:36,590 --> 00:12:37,580
Your age is 25.

173
00:12:38,450 --> 00:12:46,460
What we can do, like in the previous example with the username hit, we cannot put a string.

174
00:12:46,640 --> 00:12:55,310
We cannot put hit Alex because we said explicitly here that this is going to is going to hold only integers,

175
00:12:55,310 --> 00:12:56,440
only whole numbers.

176
00:12:56,450 --> 00:12:57,500
So I'm going to delete this.

177
00:12:58,130 --> 00:13:02,120
Let's put it again to 25 and the arrow error disappeared.

178
00:13:03,460 --> 00:13:13,580
Alright, now let's look at what we have here because you have this underlines this great light out

179
00:13:13,580 --> 00:13:20,180
of four types and every time you see something like this that means that intelligence trying to say

180
00:13:20,180 --> 00:13:22,070
something to you and if you hover over here.

181
00:13:25,550 --> 00:13:28,250
Actually it's hover over all over the type.

182
00:13:28,280 --> 00:13:30,800
It says explicitly given type.

183
00:13:30,800 --> 00:13:32,210
It's redundant here.

184
00:13:32,930 --> 00:13:37,070
And that means that it does not need to.

185
00:13:37,580 --> 00:13:38,520
We don't know.

186
00:13:38,590 --> 00:13:47,000
We don't need to say explicitly here that is going to hold a sequence of characters, is going to hold

187
00:13:47,000 --> 00:13:49,040
string because it knows this.

188
00:13:49,070 --> 00:13:54,530
You can because it's quoted in has something which is called type in inference and that means that it

189
00:13:54,530 --> 00:13:59,120
can infer the type of the variable by the value we assign to it.

190
00:13:59,120 --> 00:14:00,450
In our case, we assign some.

191
00:14:00,700 --> 00:14:02,360
So if I delete the type here

192
00:14:05,060 --> 00:14:05,630
now.

193
00:14:06,760 --> 00:14:07,690
It's still working.

194
00:14:07,690 --> 00:14:14,380
And if I as you can see, if I if I put here if let's say if I try to put your username.

195
00:14:16,860 --> 00:14:18,090
So username.

196
00:14:22,040 --> 00:14:23,060
Equals two.

197
00:14:23,420 --> 00:14:33,860
Three is still treated as a string because it in to it in further type by the value you assign to it.

198
00:14:34,160 --> 00:14:35,750
And similar to this.

199
00:14:36,800 --> 00:14:41,720
This thing applies to power in two types.

200
00:14:41,720 --> 00:14:47,840
So if I delete this is still working, is still sitting, is still treating this as it.

201
00:14:47,930 --> 00:14:56,570
Ozanian So if you try to pause here, edge equals to text and then all again we have this error and

202
00:14:56,570 --> 00:15:03,050
if this is type mismatch if required int and found string and that means that it's still a.

203
00:15:04,580 --> 00:15:10,430
It's still treating this, uh, variable as an end because as I said, it has something which is called

204
00:15:10,430 --> 00:15:15,440
type inference and it can infer the type of the variable by the value assigned to it.

205
00:15:16,280 --> 00:15:16,580
All right.

206
00:15:16,590 --> 00:15:21,800
This is our discussion about variables that are more types of variables.

207
00:15:21,800 --> 00:15:25,640
And we're going to look at that other types in the next two videos.

208
00:15:26,060 --> 00:15:28,970
And collectively, they are called data types.

209
00:15:30,200 --> 00:15:30,530
Okay.

210
00:15:31,460 --> 00:15:32,870
You can remove this space if you want.

211
00:15:33,950 --> 00:15:36,560
So I'm going to add this video now and see you in the next video.
